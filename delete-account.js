// delete-account.js - Sistema de Exclus√£o de Conta Universal
// ‚úÖ Pode ser usado em: painel.html, home.html, perfil.html, etc.

class AccountDeleter {
    constructor(supabase) {
        this.supabase = supabase;
        this.currentUser = null;
    }

    // ‚úÖ INICIALIZAR
    async initialize() {
        try {
            const { data: { user } } = await this.supabase.auth.getUser();
            this.currentUser = user;
            return !!user;
        } catch (error) {
            console.error('Erro ao inicializar:', error);
            return false;
        }
    }

    // ‚úÖ EXCLUS√ÉO REAL DA CONTA
    async deleteAccount() {
        try {
            // üîí CONFIRMA√á√ÉO FINAL
            if (!confirm('üö® EXCLUS√ÉO PERMANENTE!\n\nTem certeza que quer excluir SUA CONTA?\n\n‚ö†Ô∏è  Todos os seus dados ser√£o perdidos!\n‚ö†Ô∏è  Voc√™ n√£o poder√° mais fazer login!\n‚ö†Ô∏è  Esta a√ß√£o √© IRREVERS√çVEL!')) {
                return { success: false, message: 'Exclus√£o cancelada' };
            }

            console.log('üóëÔ∏è INICIANDO EXCLUS√ÉO DEFINITIVA...');

            // üéØ MOSTRAR CARREGAMENTO
            this.showLoading(true);

            // 1. üñºÔ∏è DELETAR FOTOS
            await this.deleteUserPhotos();

            // 2. üìã DELETAR DADOS DO BANCO
            await this.deleteUserData();

            // 3. üîê EXCLUIR CONTA DA AUTENTICA√á√ÉO
            const authDeleted = await this.deleteAuthUser();
            
            if (!authDeleted) {
                throw new Error('N√£o foi poss√≠vel excluir a conta de autentica√ß√£o');
            }

            // 4. üßπ LIMPAR TUDO
            await this.cleanup();

            console.log('‚úÖ CONTA EXCLU√çDA COM SUCESSO!');
            return { 
                success: true, 
                message: 'Conta exclu√≠da com sucesso! Redirecionando...' 
            };

        } catch (error) {
            console.error('‚ùå Erro na exclus√£o:', error);
            this.showLoading(false);
            return { 
                success: false, 
                message: 'Erro ao excluir conta: ' + error.message 
            };
        }
    }

    // ‚úÖ DELETAR FOTOS DO USU√ÅRIO
    async deleteUserPhotos() {
        try {
            // Buscar perfil para ver se tem foto
            const { data: profile } = await this.supabase
                .from('profiles')
                .select('avatar_url')
                .eq('id', this.currentUser.id)
                .single();

            if (profile?.avatar_url) {
                await this.supabase.storage
                    .from('avatars')
                    .remove([profile.avatar_url]);
                console.log('‚úÖ Fotos deletadas');
            }
        } catch (error) {
            console.log('‚ÑπÔ∏è Nenhuma foto para deletar');
        }
    }

    // ‚úÖ DELETAR DADOS DO BANCO
    async deleteUserData() {
        try {
            // Deletar em ordem correta por causa das foreign keys
            await this.supabase.from('messages').delete().or(`sender_id.eq.${this.currentUser.id},receiver_id.eq.${this.currentUser.id}`);
            await this.supabase.from('user_details').delete().eq('user_id', this.currentUser.id);
            await this.supabase.from('profiles').delete().eq('id', this.currentUser.id);
            
            console.log('‚úÖ Dados do banco deletados');
        } catch (error) {
            console.error('Erro ao deletar dados:', error);
            throw error;
        }
    }

    // ‚úÖ EXCLUIR USU√ÅRIO DA AUTENTICA√á√ÉO (IMPORTANTE!)
    async deleteAuthUser() {
        try {
            // M√©todo 1: Usar Edge Function (RECOMENDADO)
            const { data, error } = await this.supabase.functions.invoke('delete-user-complete', {
                body: { userId: this.currentUser.id }
            });

            if (!error) {
                console.log('‚úÖ Conta auth exclu√≠da via Edge Function');
                return true;
            }

            // M√©todo 2: Fallback - marcar como exclu√≠do e invalidar sess√£o
            console.log('üîÑ Usando fallback...');
            await this.supabase.auth.signOut();
            
            // Marcar perfil como exclu√≠do permanentemente
            await this.supabase
                .from('profiles')
                .update({
                    deleted_at: new Date().toISOString(),
                    nickname: 'USUARIO_EXCLUIDO',
                    full_name: 'Conta Exclu√≠da',
                    avatar_url: null,
                    birth_date: null
                })
                .eq('id', this.currentUser.id);

            console.log('‚úÖ Conta marcada como exclu√≠da (fallback)');
            return true;

        } catch (error) {
            console.error('‚ùå Erro ao excluir auth:', error);
            return false;
        }
    }

    // ‚úÖ LIMPEZA FINAL
    async cleanup() {
        try {
            // Fazer logout
            await this.supabase.auth.signOut();
            
            // Limpar storage local
            localStorage.clear();
            sessionStorage.clear();
            
            // Limpar cookies
            document.cookie.split(";").forEach(function(c) {
                document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
            });

            console.log('‚úÖ Limpeza conclu√≠da');
        } catch (error) {
            console.log('‚ö†Ô∏è Erro na limpeza:', error);
        }
    }

    // ‚úÖ MOSTRAR/OCULTAR LOADING
    showLoading(show) {
        // Encontrar bot√£o de exclus√£o na p√°gina atual
        const deleteButtons = document.querySelectorAll('[onclick*="deleteAccount"], .delete-account-btn, .action-card:nth-child(3)');
        
        deleteButtons.forEach(btn => {
            if (show) {
                btn.innerHTML = '<div class="spinner"></div><span>Excluindo conta...</span>';
                btn.style.opacity = '0.6';
                btn.disabled = true;
            } else {
                btn.innerHTML = btn.getAttribute('data-original') || '<span>üóëÔ∏è Excluir Conta</span>';
                btn.style.opacity = '1';
                btn.disabled = false;
            }
        });
    }

    // ‚úÖ REDIRECIONAR AP√ìS EXCLUS√ÉO
    redirectAfterDelete() {
        setTimeout(() => {
            window.location.href = 'index.html';
        }, 2000);
    }
}

// ‚úÖ INICIALIZA√á√ÉO GLOBAL
let accountDeleter = null;

async function initializeAccountDeleter(supabase) {
    accountDeleter = new AccountDeleter(supabase);
    const initialized = await accountDeleter.initialize();
    return initialized;
}

// ‚úÖ FUN√á√ÉO GLOBAL PARA USO EM TODAS AS P√ÅGINAS
async function deleteUserAccount() {
    if (!accountDeleter) {
        alert('Sistema de exclus√£o n√£o inicializado');
        return;
    }

    const result = await accountDeleter.deleteAccount();
    
    if (result.success) {
        alert(result.message);
        accountDeleter.redirectAfterDelete();
    } else {
        alert(result.message);
    }
}

// ‚úÖ DETECTAR SE EST√Å NO SUPABASE E CRIAR INST√ÇNCIA
if (typeof supabase !== 'undefined') {
    initializeAccountDeleter(supabase);
}